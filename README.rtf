Main.py processes data from the MNIST database. It will create and train a neural network and process images.

1. Download mnist_train.csv and mnist_test.csv into a directory on your computer. Change the data_path global variable in Main.py to the path of that directory. 
2. Run processData() in the main() method in Main.py to process the greyscaled images. Raw pixel values range from 0 to 255; processData() converts them to values in the range [0.01, 1]. ProcessData() also converts the raw labels (0-10 corresponding to the correct digit for each image) into a one-hot representation. For example, a label of 2 is converted to [0,0,1,0,0,0,0,0,0,0]. The processed test and train images and labels are pickled and saved at data_path/pickled_mnist.pkl.
3. Call trainNetwork() to calculate and store weights for the neural network. The method will default to a 3-layer network with 80 nodes in layers 1 and 2 and 10 output nodes in layer 3, a learning rate of .1 (which determines the rate of gradient descent) and 3 runs through the same training data to continually readjust the weights matrix. The final weights matrices are stored in data_path/pickled_weights.pkl. TrainNetwork() calls nn.train(), which runs nn.feedforward(x) and nn.backbrop(x,y), using the training data. It then evaluates the network's performance via nn.evaluate(), which uses the training data.
4.Call singleResult(x) to get the network's output for a given input x (an array of length 784 corresponding to an input image). SingleResult(x) loads data_path/pickled_weights.pkl into a neural network, then runs nn.feedforward(x), returning an array with the one-hot representation of the network's output.

Note that after calling processData() you need not call it again. Also, you only need to call trainNetwork() again to update weights, for example because you want to change the network structure. Otherwise, call singleResult(), which returns the network's guess at an individual image.
